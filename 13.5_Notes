#JavaScript Object Notation (JSON)
#有些真正重要的事情JSON是做不到的，比如循环结构。图形不容易用JSON表示。但它较于XML更直观，在內部结构上导向更明确。
第一种dic里嵌套list of dic
import json

data = '''
{
  "name" : "Chuck",
  "phone" : {
    "type" : "intl",
    "number" : "+1 734 303 4456"
   },
   "email" : {
     "hide" : "yes"
   }
}'''

info = json.loads(data)#返回的是一种objects，以dic的格式
print('Name:', info["name"])
print('Hide:', info["email"]["hide"])

第二种list->dic
import json

data = '''
[
  { "id" : "001",
    "x" : "2",
    "name" : "Chuck"
  } ,
  { "id" : "009",
    "x" : "7",
    "name" : "Brent"
  }
]'''

info = json.loads(data)#It's not an object, it's a list.
print('User count:', len(info))

for item in info:
    print('Name', item['name'])
    print('Id', item['id'])
    print('Attribute', item['x'])

13.7-教学example code-针对于Google map API
import urllib.request, urllib.parse, urllib.error
import json
import ssl

api_key = False
# If you have a Google Places API key, enter it here
# api_key = 'AIzaSy___IDByT70'
# https://developers.google.com/maps/documentation/geocoding/intro

if api_key is False:
    api_key = 42
    serviceurl = 'http://py4e-data.dr-chuck.net/json?'
else :
    serviceurl = 'https://maps.googleapis.com/maps/api/geocode/json?'

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

while True:
    address = input('Enter location: ')
    if len(address) < 1: break

    parms = dict()
    parms['address'] = address
    if api_key is not False: parms['key'] = api_key
    url = serviceurl + urllib.parse.urlencode(parms)#that's a concatenation串联 URL和后面的具体地址address=Ann+Arbor%2C+MI连起来

    print('Retrieving', url)
    uh = urllib.request.urlopen(url, context=ctx)
    data = uh.read().decode()#google给我们的是UTF-8，需要解码成为Python Unicode 字符串在内部环境使用。
    print('Retrieved', len(data), 'characters')

    try:
        js = json.loads(data)
    except:
        js = None

    if not js or 'status' not in js or js['status'] != 'OK':#如果成功的话，status！=OK 是响应的一部分。所以这是一个让你知道你没有得到任何好的数据的方法
        print('==== Failure To Retrieve ====')
        print(data)
        continue

    print(json.dumps(js, indent=4))
    '''JSON dumps which is the opposite of loads which takes this array that dictionary and includes arrays and we're going to pretty print it
    JSON转储，这与加载相反，它需要这个数组，字典和包括数组，我们要漂亮地打印它以四位缩进'''

    lat = js['results'][0]['geometry']['location']['lat']
    lng = js['results'][0]['geometry']['location']['lng']
    print('lat', lat, 'lng', lng)
    location = js['results'][0]['formatted_address']
    print(location)
''''''API是对URL模式的规范，是我们应该发送的数据的语法，是我们可以期望得到的数据的语法.
API的生产者，即拥有数据、输出API和定义API的人。而消费者则是阅读API的文档，写一些代码，然后遵守API的规则的人。
https://maps.googleapis.com/maps/api/geocode/json是一个URL
加一个？后面是encode这些参数。
谷歌地图API一起工作。在过去，这个地图API是免费的，每天有2500个请求。
但现在，他们已经使它的一部分在API密钥后面，你开始使用OAuth和其他东西，但他们没有把它全部放在我们一直在使用的这个地址服务后面.'''

#Securing API Requests
google 限制rquest per day；Twitter API, you get zero requests unless you are authorized

13.8-教学example code-针对于Twitter API
import urllib.request, urllib.parse, urllib.error
import twurl'''用于解决API授权问题
在样本代码中有一个叫hidden.py的文件。
你必须剪下并粘贴你在登录后从Twitter网站上得到的四个值(consumer_key, the consumer_secret, the token_key, the token_secret)。
它会给你这些值，你必须把它们放进去，所以hidden.py是twurl的一部分
使用了一个叫做OAuth的protocol，基本上我们要做的就是签署URL，所以它不仅仅是一个URL。
它是一个URL加上URL上的签名 URL plus the signature on the URL。
它的签名方式是，只要你知道密钥和秘密，就可以签署这些东西'''
import json
import ssl

# https://apps.twitter.com/
# Create App and get the four strings, put them in hidden.py

TWITTER_URL = 'https://api.twitter.com/1.1/friends/list.json'

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

while True:
    print('')
    acct = input('Enter Twitter Account:')
    if (len(acct) < 1): break#如果你再次点击回车，我们就会跳过。
    url = twurl.augment(TWITTER_URL,#这个对Twitter网址的增强，并做所有的网址编码。
                        {'screen_name': acct, 'count': '5'})
    print('Retrieving', url)
    connection = urllib.request.urlopen(url, context=ctx)
    data = connection.read().decode()
    '''
    这不是JSON。它是JSON的字符串表示。
    简单来说，json字符串指的就是json本身，由于JavaScript是弱类型语言，所以没有办法直接传递对象或是数组，
    所以提出了json格式的字符串，用于数据传递'''

    js = json.loads(data)
    print(json.dumps(js, indent=2))#转储得到

    headers = dict(connection.getheaders())'''在我们一直在做的所有这些urllib请求/响应循环中，我们一直在得到头文件。所以，事实证明，这就是你用来获取头信息的那行代码
    如果你用connecting.read，得到的是headers；connecting.getheaders是连接里面的一个方法，找到隐藏的headers以dic的格式'''
    print('Remaining', headers['x-rate-limit-remaining'])'''Twitter将向你传达在他们关闭你之前，他们将允许你再做多少个这样的请求，
    因为这是每天的事情。这个头的名称是X-rate-limit-remaining'''

    for u in js['users']:
        print(u['screen_name'])
        if 'status' not in u:
            print('   * No status found')
            continue
        s = u['status']['text']
        print('  ', s[:50])



Worked Example: Twitter API (Chapter 13)-twtest.py
import urllib.request, urllib.parse, urllib.error
from twurl import augment
import ssl

# https://apps.twitter.com/
# Create App and get the four strings, put them in hidden.py

print('* Calling Twitter...')
url = augment('https://api.twitter.com/1.1/statuses/user_timeline.json',
              {'screen_name': 'drchuck', 'count': '2'})'''一个增量来自于这一小段叫做twURL的代码。这使用了一点叫做OAuth的代码，它也是内置在Python中的'''
print(url)

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

connection = urllib.request.urlopen(url, context=ctx)
data = connection.read()
print(data)

print ('======================================')
headers = dict(connection.getheaders())
print(headers)


Worked Example: Twitter API (Chapter 13)-twurl.py
import urllib.request, urllib.parse, urllib.error
import oauth
import hidden

# https://apps.twitter.com/
# Create App and get the four strings, put them in hidden.py

def augment(url, parameters):
    secrets = hidden.oauth()
    consumer = oauth.OAuthConsumer(secrets['consumer_key'],
                                   secrets['consumer_secret'])
    token = oauth.OAuthToken(secrets['token_key'], secrets['token_secret'])

    oauth_request = oauth.OAuthRequest.from_consumer_and_token(consumer,
                    token=token, http_method='GET', http_url=url,
                    parameters=parameters)
    oauth_request.sign_request(oauth.OAuthSignatureMethod_HMAC_SHA1(),
                               consumer, token)#signature of URL
    return oauth_request.to_url()


def test_me():
    print('* Calling Twitter...')
    url = augment('https://api.twitter.com/1.1/statuses/user_timeline.json',
                  {'screen_name': 'drchuck', 'count': '2'})
    print(url)
    connection = urllib.request.urlopen(url)
    data = connection.read()
    print(data)
    headers = dict(connection.getheaders())
    print(headers)
